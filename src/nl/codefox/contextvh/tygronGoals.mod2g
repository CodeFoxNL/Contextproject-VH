use knowledgebase as knowledge.

order = linearall.
module tygronGoals {
	%_______________________________Adopt goals based on the environment_______________________________%
	
	% Adopt goal to build where a demolished building was previously located.
	forall bel(emptyPoly(MultiPoly))
		do adopt(constructBuilding(MultiPoly)).
	
	% Adopt goals to improve zones for which the agent has not achieved it's target values'
	forall bel(needImprovement(IndicatorID,Zone))
		do adopt(improvedZone(IndicatorID,Zone)).
	
	% Example of buying and demolish on ground that we just bought.
	if bel(building(BuildingId,'Overige functie (1218) verkocht',_,_,_,_,_,MultiPoly,_,_),ownedBuilding(BuildingId))
		then adopt(demolishBuilding(BuildingId)).
	
	% Example of buying and demolish on ground that we just bought.
	if bel(building(BuildingId,'Overige functie (1218)',_,_,_,_,_,MultiPoly,_,_),landOfOthers(MultiPoly),not(doneBuying(MultiPoly)))
		then adopt(doneBuying(MultiPoly)).
	
	% Example of a building we will demolish

	if bel(building(BuildingId,'Prof. Henketstraat 48-80',_,_,_,_,_,_,_,_),ownedBuilding(BuildingId))
		then adopt(demolishBuilding(BuildingId)).	
	
	% Upgrade a building when the indicator it improves still needs improvement
	%% List of available upgrades for our buildings
		%UpgradeID/UpgradeDescription/example affected indicators
		%0/Woningen Renoveren/
			%3,SpatialQuality,+0.0034
			%6,Budget,-156144
			%34,Surface,+0,0036
		%41/Zonnepanelen/
			%6,Budget,-3318
			%34,Surface,-0.002
	if bel(needImprovement(3,ZoneId)) then print(search123).
	if a-goal(zoneToRenovate(ZoneId)) then print(search1).
	if bel(UpgradeID is 0,upgrade_type(UpgradeID,UpgradeTypes),
	random_member(upgrade_pair(FunctionId,_),
	UpgradeTypes),building(BuildingId,_,_,_,_,FunctionId,_,_,_,ZoneId),
	ownedBuilding(BuildingId)), a-goal(zoneToRenovate(ZoneId)) then print(search2).
	
	if bel(UpgradeID is 0,upgrade_type(UpgradeID,UpgradeTypes),random_member(upgrade_pair(FunctionId,_),UpgradeTypes),building(BuildingId,_,_,_,_,FunctionId,_,_,_,ZoneId),ownedBuilding(BuildingId)), 
		a-goal(zoneToRenovate(ZoneId)), not(a-goal(demolishBuilding(BuildingId)))
		then adopt(upgradeBuilding(UpgradeID,BuildingId)).
		
	forall a-goal(indicator(19,_,_,ZoneLinkList),member(zone_link(_,ZoneId,Current,Target),ZoneLinkList),Current<Target,
		building(BuildingId,_,_,_,_,FunctionId,_,_,_,ZoneId),ownedBuilding(BuildingId),alreadyUpgraded(BuildingId),
		upgrade_type(UpgradeID,UpgradeTypes),random_member(upgrade_pair(FunctionId,_),UpgradeTypes))
		do print(UpgradeID).
	
	
	if a-goal(indicator(19,_,_,ZoneLinkList),member(zone_link(_,ZoneId,Current,Target),ZoneLinkList),Current<Target,
		building(BuildingId,_,_,_,_,FunctionId,_,_,_,ZoneId),ownedBuilding(BuildingId),alreadyUpgraded(BuildingId),
		UpgradeID is 0, upgrade_type(UpgradeID,UpgradeTypes),random_member(upgrade_pair(FunctionId,_),UpgradeTypes))
		then adopt(upgradeBuilding(UpgradeID, BuildingId)).
		
	% Adopt goals to demolish social buildings when we want more luxury or normal buildings
	if bel(indicator(34,_,_,ZoneLinkList), ourID(OurID), member(zone_link(OurID,_,Current3,Target3),ZoneLinkList),Current3<Target3,
		member(zone_link(1,_,Current2,Target2),ZoneLinkList),member(zone_link(0,_,Current1,Target1),ZoneLinkList),
		(Current1<Target1;Current2<Target2),building(BuildingId,_,_,_,['SOCIAL'],_,_,_,_,_),ownedBuilding(BuildingId),
		not(alreadyUpgraded(BuildingId)))
		then adopt (demolishBuilding(BuildingId)).
	%__________________________________________________________________________________________________%
}