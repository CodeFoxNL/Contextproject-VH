use knowledgebase as knowledge.
use tygronGoals as module. 
use tygronRequests as module.
use tygron as actionspec.

module tygronEvents {
	
	%%%%% Percept Processing %%%%%
	
	% update settings if they have changed
	if percept(settings(X)),bel(settings(Y),X \= Y) then delete(settings(Y)) + insert(settings(X)).
	% update list actions if they have changed
	if percept(actions(X)),bel(actions(Y)) then delete(actions(X)) + insert(actions(Y)).
		
	%%% BUILDING PERCEPTS
	% update building/10 when another percept is received with similar ID but with other values.
	forall percept(buildings(List)),
		bel(building(BuildingID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPoly,Area,Zone),
		member(building(BuildingID,OtherName,OtherOwnerID,OtherConstructionYear,OtherCategories,OtherFunctionID,OtherFloors,OtherMultiPoly,OtherArea,OtherZone),List),
		(OwnerID\=OtherOwnerID; Name\=OtherName; BuildYear\=OtherBuildYear; Categories\=OtherCategories; Floors\=OtherFloors; FunctionID\=OtherFunctionID; MultiPoly\=OtherMultiPoly;Area\=OtherArea;Zone\=OtherZone)) 
		do delete(building(BuildingID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPoly,Area,Zone)) + 
		insert(building(BuildingID,OtherName,OtherOwnerID,OtherConstructionYear,OtherCategories,OtherFunctionID,OtherFloors,OtherMultiPoly,OtherArea,OtherZone)).
	% delete building/10 from beliefs when a building no longer exists.
	forall percept(buildings(List)),
		bel(building(BuildingID,Name,OwnerID,ConstructionYear,Categories,FunctionID,Floors,Multipoly,Area,Zone),
		not(member(building(BuildingID,_,_,_,_,_,_,_,_,_),List))) 
		do delete(building(BuildingID,Name,OwnerID,ConstructionYear,Categories,FunctionID,Floors,Multipoly,Area,Zone)).
	% insert building/10 into beliefs when a new building has been built.
	forall percept(buildings(List)),
		bel(member(building(BuildingID,Name,OwnerID,ConstructionYear,Categories,FunctionID,Floors,MultiPoly,Area,Zone),List),
		not(building(BuildingID,_,_,_,_,_,_,_,_,_))) 
		do insert(building(BuildingID,Name,OwnerID,ConstructionYear,Categories,FunctionID,Floors,MultiPoly,Area,Zone)).
		
	%%% ZONE PERCEPT
	forall percept(zones(List)),bel(zone(ZoneID,OldName,OldFloors,OldSize,OldCategories),
		member(zone(ZoneID,NewName,NewFloors,NewSize,NewCategories),List)) 
		do delete(zone(ZoneID,OldName,OldFloors,OldSize,OldCategories)) 
		+ insert(zone(ZoneID,NewName,NewFloors,NewSize,NewCategories)).
		
	%%% LAND PERCEPT
	% update lands
	forall percept(lands(List)),
		bel(land(LandID,OldOwnerID,OldMultiPoly,OldZoneList,OldSize),
		member(land(LandID,NewOwnerID,NewMultiPoly,NewZoneList,NewSize),List),
		(OldOwnerID\= NewOwnerID ; OldMultiPoly \= NewMultiPoly ; OldZoneList \= NewZoneList ; OldSize \= NewSize))
		do delete(land(LandID,OldOwnerID,OldMultiPoly,OldZoneList,OldSize)) + insert(land(LandID,NewOwnerID,NewMultiPoly,NewZoneList,NewSize)).
	% insert new lands
	forall percept(lands(List)),bel(member(land(LandID,OwnerID,MultiPoly,ZoneIDList,Size),List),not(land(LandID,_,_,_,_)))
		do insert(land(LandID,OwnerID,MultiPoly,ZoneIDList,Size)).
	% delete old lands that no longer exist
	forall percept(lands(List)),bel(land(LandID,OwnerID,OldMultiPoly,OldZoneList,OldSize),not(member(land(LandID,_,_,_,_),List)))
		do delete(land(LandID,OwnerID,OldMultiPoly,OldZoneList,OldSize)).

	%%% INDICATOR PERCEPTS
	% update indicator/4 [indicator(IndicatorID,Current,Target,ZoneIndicatorsList)]]
	% when another percept is received with the same IndicatorID but with other values.
	forall percept(indicators(List)),
		bel(indicator(IndicatorID,Value,Target,ZoneLinks),
		member(indicator(IndicatorID,OtherValue,OtherTarget,OtherZoneLinks),List),
			(Value\=OtherValue; Target\=OtherTarget; ZoneLinks\=OtherZoneLinks))
		do delete(indicator(IndicatorID,Value,Target,ZoneLinks)) + 
		insert(indicator(IndicatorID,OtherValue,OtherTarget,OtherZoneLinks)).
	
	%%% ACTIONLOG PERCEPTS	
	forall percept(action_logs(ActList)), 
		bel(member(actionlog(StakeholderID,Description,ActionID,IncList),ActList))
		do insert(actionlog(StakeholderID,Description,ActionID,IncList)).

	% enter tygronGoals to adopt goals when preconditions are met
	if true then tygronGoals.
	if true then tygronRequests.
}
