use knowledgebase as knowledge.
use tygronGoals as module. 

module tygronEvents {
	
	%%%%% Percept Processing %%%%%
	if percept(stakeholders(X)), bel(stakeholders(Y))  then  delete( stakeholders(Y) ) + insert(stakeholders(X)).
	if percept(settings(X)), bel(settings(Y), X \= Y) then delete(settings(Y)) + insert(settings(X)).
	if percept(functions(X)), bel(functions(Y)) then delete(functions(Y)) + insert(functions(X)).
	
	if percept(indicators(X)), bel(indicators(Y)) then delete(indicators(Y)) + insert(indicators(X)).
	if percept(actions(X)), bel(actions(Y)) then delete(actions(X)) + insert(actions(Y)).
	
	if percept(lands(X)), bel(lands(Y)) then delete (lands(Y)) + insert(lands(X)).
	if percept(zones(X)), bel(zones(Y)) then delete(zones(Y)) + insert(zones(X)).
	
	% add new land/5 to the believe base
	forall percept(lands(List)), bel(member(land(LandID, OwnerID, MultiPoly, ZoneIDList, Size),List), not(land(LandID,_,_,_,_)))
		do insert(land(LandID, OwnerID, MultiPoly, ZoneIDList, Size)).
	% update land/5
	forall percept(lands(List)), bel(land(LandID, OldOwnerID, OldMultiPoly, OldZoneList, OldSize),
		member(land(LandID, NewOwnerID, NewMultiPoly, NewZoneList, NewSize), List))
		do delete(land(LandID, OldOwnerID, OldMultiPoly, OldZoneList, OldSize)) + insert(land(LandID, NewOwnerID, NewMultiPoly, NewZoneList, NewSize)).
		
	% insert and update all zone/5
	forall percept(zones(List)), bel(zone(ZoneID, OldName, OldFloors, OldSize, OldCategoriesList), 
		member(zone(ZoneID, NewName, NewFloors, NewSize, NewCategoriesList), List)) 
		do delete(zone(ZoneID, OldName, OldFloors, OldSize, OldCategoriesList)) 
		+ insert(zone(ZoneID, NewName, NewFloors, NewSize, NewCategoriesList)).
	
	% insert upgrade_type/3 to beliefs when it is received as percept but is not already in the beliefs.  
	forall percept(upgrade_types(List)),
		bel(member(upgrade_type(UpgradeID, SourceID, TargetID), List), not(upgrade_type(UpgradeID,_,_)))
		do insert(upgrade_type(UpgradeID, SourceID, TargetID)).
	
	% insert indicator/4 to beliefs when it is received as percept but is not already in the beliefs. 
	forall percept(indicators(List)), 
		bel(member(indicator(ID,Value,Target, ZoneLink), List), not(indicator(ID,_,_,_)))
		do insert(indicator(ID,Value,Target, ZoneLink)).	
		
	% update indicator/4 when another percept is received with similar ID but with other values. 			
	forall percept(indicators(List)), 
		bel(indicator(ID,Value,Target,ZoneLinks), member(indicator(ID,OtherValue,OtherTarget, OtherZoneLinks),List), (Value \= OtherValue ; Target \= OtherTarget; ZoneLinks \= OtherZoneLinks)) 
		do delete(indicator(ID,Value,Target,ZoneLinks)) + 
		insert(indicator(ID,OtherValue,OtherTarget, OtherZoneLinks)).

	% insert building/8 to beliefs when it is received as percept but is not already in the beliefs.		
	forall percept(buildings(List)), 
		bel(member(building(ID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPolygon),List), not(building(ID,_,_,_,_,_,_,_))) 
		do insert(building(ID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPolygon)).

	% update building/8 when another percept is received with similar ID but with other values.
	forall percept(buildings(List)), 
		bel(building(ID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPolygon), member(building(ID, OtherName,OtherOwnerID,OtherConstructionYear,OtherCategoriesList,OtherFunctionID,OtherFloors,OtherMultiPolygon),List), 
		(OwnerID \= OtherOwnerID ; Name \= OtherName; BuildYear \= OtherBuildYear; Categories \= OtherCategories; Floors \= OtherFloors; FunctionID \= OtherFunctionID; MultiPolygon \= OtherMultiPolygon)) 
		do delete(building(ID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPolygon)) + 
		insert(building(ID, OtherName,OtherOwnerID,OtherConstructionYear,OtherCategoriesList,OtherFunctionID,OtherFloors,OtherMultiPolygon)).
	
	% delete building/8 from beliefs when no percept is received with similar ID. 
	forall percept(buildings(List)), 
		bel(building(ID, OtherName,OtherOwnerID,OtherConstructionYear,OtherCategoriesList,FunctionID,OtherFloors,OtherMultiPolygon), 
		not(member(building(ID,_,_,_,_,_,_,_),List))) 
		do delete(building(ID, OtherName,OtherOwnerID,OtherConstructionYear,OtherCategoriesList,FunctionID,OtherFloors,OtherMultiPolygon)).
	
	% insert actionlog/4 to belief base	
	forall percept(actionlog(StakeholderID, ActionLog, LogId, ParameterList)),
		bel(not(actionlog(StakeholderID, ActionLog, LogId, ParameterList)))
		do insert(actionlog(StakeholderID, ActionLog, LogId, ParameterList)).
	
	% go to goal module	
	if true then tygronGoals. 		
}
