use knowledgebase as beliefs.

module tygronInit {
	
	%%% Insert Once percepts
	
		% stakeholders do not change during the game
		forall percept(stakeholders(List)),
			bel(member(SubList,List),member(stakeholder(StakeholderID,Name,Budget,Income),SubList)) 
			do insert(stakeholder(StakeholderID,Name,Budget,Income)).
		% functions do not change during the game			
		forall percept(functions(FunctionList)),bel(member([FunctionName,FunctionID,List],FunctionList))
			do insert(function(FunctionName,FunctionID,List)).
	
	%%% Initialize knowledge (will be updated in the event module each cycle)
	
		% initialize settings and actions
		if true then insert(settings([])).
		if true then insert(actions([])).
				
		% initialize all lands
		forall percept(lands(List)),bel(member(land(LandID,OwnerID,MultiPoly,ZoneList,Size),List))
			do insert(land(LandID,OwnerID,MultiPoly,ZoneList,Size)).
		% initialize all zones
		forall percept(zones(List)),bel(member(zone(ZoneID,Name,Floors,Size,Categories),List)) 
			do insert(zone(ZoneID,Name,Floors,Size,Categories)).
		% initialize all buildings
		forall percept(buildings(List)),
			bel(member(building(ID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPoly,Area),List))
			do insert(building(ID,Name,OwnerID,BuildYear,Categories,FunctionID,Floors,MultiPoly,Area)).

		% initialize the indicatorLinks of our agent				
		forall percept(stakeholders(List)),
			bel(member(SubList,List),member(indicatorLink(StakeholderID,Weights),SubList),ourID(StakeholderID)) 
			do insert(indicatorLink(StakeholderID,Weights)).
		
		% initialize all indicators	
		forall percept(indicators(List)),
			bel(member(indicator(ID,Value,Target,ZoneLink),List))
			do insert(indicator(ID,Value,Target,ZoneLink)).
			
		% initialize all upgrade_types
		forall percept(upgrade_types(List)),
			bel(member(upgrade_type(UpgradeID,UpgradePairs),List),not(upgrade_type(UpgradeID,_)))
			do insert(upgrade_type(UpgradeID,UpgradePairs)).

}
